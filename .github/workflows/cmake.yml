name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Checkout submodules
      run: git submodule update --init --recursive
      
    - name: Install dependencies
      run: |
          sudo apt update
          sudo apt install libegl1-mesa-dev libgl-dev
          sudo apt install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev
      
    - name: Setup Opengl
      uses: openrndr/setup-opengl@v1.1
      
    - name: Setup CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build Libraries
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Build Sources
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build
      
    #- name: Test
    #  working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest -C ${{env.BUILD_TYPE}}
    
    - name: Generate Release Artifact
      working-directory: ${{github.workspace}}/build
      run: |
        zip release-artifact betther-than-nothing
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload Release with Artifact
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ${{github.workspace}}/build/release-artifact.zip
        asset_name: release-linux-${{ github.ref }}.zip
        asset_content_type: application/zip
      
    - name: Remove Build folder
      uses: JesseTG/rm@v1.0.3
      with:
          path: ${{github.workspace}}/build
